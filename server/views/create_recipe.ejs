<!DOCTYPE html>
<html lang="en">

<head>
  <!-- Partial Head Data -->
  <%- include('partials/head.ejs') %>
    <link rel="stylesheet" href="/footer.css">

    <!-- CSS  -->
    <style>
      .input_section {
        margin-top: 20px;
        margin-bottom: 20px;
      }

      .add_button {
        /* margin-top: 20px;
        margin-bottom: 20px; */
        margin-right: 15px;
      }

      .remove_button {
        margin-right: 5px;
      }

      input:invalid {
        box-shadow: 0 0 5px 1px red;
      }
    </style>
</head>

<body>
  <!-- Navigation Menu -->
  <%- include('partials/nav.ejs') %>

    <!-- CENTER ENTIRE PAGE CONTENT -->
    <div class="w3-content" style="max-width:95%;background-color: white;">
      <header class="w3-center">
        <h1>Create Recipe</h1>
      </header>

      <!-- Create Recipe Form -->
      <form class="w3-container" action="/create-recipe" method="post" enctype="multipart/form-data">
        <div class="w3-section">

          <!-- Recipe Name -->
          <div class="input_section">
            <label><b>Name</b></label><br>
            <label>Keep the name descriptive.</label>
            <span class="w3-right w3-small">50</span>
            <span class="w3-right w3-small">/</span>
            <span id="recipe_name_length" class="w3-right w3-small">0</span>
            <input id="recipe_name" class="w3-input w3-border" type="text" maxlength="50" minlength="3"
              placeholder="Enter Recipe Name" name="name" pattern="^[A-Z][\w\.\-\s]*[^\n\f\r\t\s\.]$"
              onkeyup="isNameValid(); calcTextLength(this.id, 'recipe_name_length'); setCardImageRecipeName(this)"
              required>
            <div id="recipe_name_feedback" style="color: red; display: none;">The recipe name already exists.</div>
          </div>

          <!-- Description -->
          <div class="input_section">
            <label><b>Description</b></label><br>
            <label>A short introduction to what this recipe is.</label>
            <span class="w3-right w3-small">200</span>
            <span class="w3-right w3-small">/</span>
            <span id="description_length" class="w3-right w3-small">0</span>
            <textarea id="description" class="w3-input w3-border" rows="3" maxlength="200"
              placeholder="Enter short description that ends in period." name="description"
              pattern="^[A-Z][\w\.\-\s]*[\.]$"
              onkeyup="calcTextLength(this.id, 'description_length'); setCardImageRecipeDescription(this)"
              required></textarea>
          </div>

          <!-- Cook Time -->
          <div class="input_section">
            <label><b>Cook Time</b></label><br>
            <label>The time it takes to cook the recipe measured in minutes</label>
            <select class="w3-select" id="cook_time_selector" name="cook_time_selector" onchange="cookTimeSelector()"
              required>
              <option value="" disabled selected>Choose your option</option>
              <option value="interval">Interval (prefered)</option>
              <option value="more_than">More than</option>
              <option value="less_than">Less than</option>
              <option value="specific">Specific</option>
            </select>
            <!-- Cook time enter value -->
            <div id="cook_time_fields" class="w3-row">
            </div>

            <!-- Difficulty -->
            <div class="input_section">
              <label><b>Difficulty</b></label><br>
              <label>Required experience level to able to cook this recipe</label>

              <% for( let i=0; i < difficulties.length; i++ ) { %>
                <br>
                <input id="difficulty-<%= difficulties[i] %>" class="w3-radio" type="radio" name="difficulty"
                  value="<%= difficulties[i] %>" checked>
                <label for="difficulty-<%= difficulties[i] %>">
                  <%= difficulties[i].charAt(0).toUpperCase() + difficulties[i].slice(1) %>
                </label>
                <% } %>
            </div>

            <!-- Default Portions -->
            <div class="input_section">
              <label><b>Default Portions</b></label><br>
              <label>The default amount that the recipe is portioned for</label>
              <input class="w3-input w3-border" type="number" min="1" max="99" placeholder="Enter default portions"
                name="default_portions" required>
            </div>

            <!-- Category -->
            <div class="input_section">
              <label><b>Categories</b></label>
              <br>
              <label>Select one or several categories the recipe belongs to</label>
              <br>
              <% for( let i=0; i < categories.length; i++ ) { %>
                <br>
                <input id="category-<%= categories[i] %>" name="category" class="w3-check" type="checkbox"
                  value="<%= categories[i] %>">
                <%# Displays the categories with the first letter upper case %>
                  <label for="category-<%= categories[i] %>">
                    <%= categories[i].charAt(0).toUpperCase() + categories[i].slice(1) %>
                  </label>
                  <% } %>
            </div>

            <!-- Ingredients -->
            <div class="input_section">
              <label><b>Ingredients</b></label><br>
              <label>Enter the ingredients required for the recipe</label>
              <div id="ingredient">
                <div class="w3-row-padding">
                  <!-- Ingredient -->
                  <div class="w3-quarter">
                    <input class="w3-input w3-border" type="text" placeholder="Enter ingredient" name="ingredient"
                      onkeyup="isIngredientDuplicate(this.value, parentNode.parentNode.parentNode.id)" required>
                  </div>
                  <!-- Amount -->
                  <div class="w3-quarter">
                    <input class="w3-input w3-border" type="number" min="0" step="0.5" placeholder="Enter amount"
                      name="amount" required>
                  </div>
                  <!-- Measurement Unit -->
                  <div class="w3-quarter">
                    <select class="w3-input w3-border" id="ingredient_unit" name="ingredient_unit" required>
                      <option value="" selected disabled hidden>Choose Unit</option>
                      <%# Fill in measurement unit options from database %>
                        <% for( let i=0; i < measurementUnits.length; i++ ) { %>
                          <option value="<%= measurementUnits[i] %>">
                            <%= measurementUnits[i] %>
                          </option>
                          <% } %>
                    </select>
                  </div>
                  <!-- Note -->
                  <div class="w3-quarter">
                    <input class="w3-input w3-border" type="text" placeholder="Enter note (optional)"
                      name="ingredient_note" maxlength="100">
                  </div>
                </div>
              </div>
            </div>

            <!-- Add and remove Ingredient buttons -->
            <div id="add_ingredient" class="add_button w3-button w3-right w3-green" onclick="addIngredient()">+</div>
            <div id="remove_ingredient" class="remove_button w3-button w3-right w3-red" style="display: none;"
              onclick="removeIngredient()">-</div>

            <!-- Steps -->
            <div class="input_section" style="margin-top: 50px;">
              <label><b>Steps</b></label><br>
              <label>Write the instructions for cooking the recipe</label>
              <div id="step">
                <div class="w3-row-padding">
                  <div class="w3-twothird">
                    <input class="w3-input w3-border" type="text" placeholder="Enter instruction" name="step" required>
                  </div>
                  <div class="w3-third">
                    <input class="w3-input w3-border" type="text" placeholder="Enter note (optional)" name="step_note"
                      maxlength="100">
                  </div>
                </div>
              </div>
            </div>

            <!-- Add and remove Step buttons -->
            <div id="add_step" class="add_button w3-button w3-right w3-green" onclick="addStep()">+</div>
            <div id="remove_step" class="remove_button w3-button w3-right w3-red" style="display: none;"
              onclick="removeStep()">-</div>

            <!-- Images -->
            <!-- Recipe Image for the actual recipe -->
            <div class="input_section" style="margin-top: 50px;">
              <label><b>Recipe Image</b></label><br>
              <label for="recipe_image">Upload image for the recipe page (16:9)</label>
              <input id="recipe_image" name="image" class="w3-input" type="file" accept=".jpg"
                onchange="setImageInfo(this.id, 'recipe_image_link', 'recipe_image_description', '16:9')" required>
              <!-- Link and description -->
              <br>
              <div class="w3-row-padding">
                <div class="w3-half">
                  <label for="recpe_image_link">Link</label>
                  <input id="recipe_image_link" name="image_link" class="w3-input w3-border"
                    placeholder="No image selected" type="text" readonly required>
                </div>
                <div class="w3-half">
                  <label for="recipe_image_description">Description</label>
                  <input id="recipe_image_description" name="image_description" placeholder="No image selected"
                    class="w3-input w3-border" type="text" readonly required>
                </div>
              </div>
              <!-- Display Image -->
              <div id="recipe_image_preview_container" class="w3-margin" style="min-width: 300px; min-height: 100px; 
                  border: 1px solid lightgray; display: flex; align-items: center; justify-content: center; 
                  font-weight: bold; color: lightgray;">
                <img id="recipe_image_preview" src="" alt="Image Preview" style="display: none; width: 100%;"
                  onload="setImageSize(this, 'recipe_image_size', '16:9', 'recipe_image_size_checkmark')"></img>
                <span id="recipe_image_preview_text">Image Preview</span>
              </div>
              <!-- Display Image Size -->
              <div class="w3-margin w3-center">
                <span id="recipe_image_size"
                  style="border: 1px solid lightgray; color: lightgray; font-weight: bold; padding: 5px;">
                  Image Size
                </span>
                <span id="recipe_image_size_checkmark" style="font-size: 16px; display: none;"></span>
              </div>
            </div>
            <!-- Card Image for the recipes page -->
            <div class="input_section" style="margin-top: 50px;">
              <label><b>Card Image</b></label><br>
              <label for="card_image">Upload image for the recipes page (4:3)</label>
              <input id="card_image" name="image" class="w3-input" type="file" accept=".jpg"
                onchange="setImageInfo(this.id, 'card_image_link', 'card_image_description', '4:3')" required>
              <!-- Link and description -->
              <br>
              <div class="w3-row-padding">
                <div class="w3-half">
                  <label for="card_image_link">Link</label>
                  <input id="card_image_link" name="image_link" class="w3-input w3-border"
                    placeholder="No image selected" type="text" readonly required>
                </div>
                <div class="w3-half">
                  <label for="card_image_description">Description</label>
                  <input id="card_image_description" name="image_description" placeholder="No image selected"
                    class="w3-input w3-border" type="text" readonly required>
                </div>
              </div>
              <!-- Display Image -->
              <div class="w3-card w3-round-large w3-margin" style="padding: none; padding-bottom: 5px;">

                <div style="min-width: 300px; min-height: 100px; border: 1px solid lightgray; display: flex; 
                  align-items: center; justify-content: center; font-weight: bold; color: lightgray;">
                  <img id="card_image_preview" src="" alt="Image Preview" style="display: none; width:100%;"
                    onload="setImageSize(this, 'card_image_size', '4:3', 'card_image_size_checkmark')"></img>
                  <span id="card_image_preview_text">Image Preview</span>
                </div>

                <div class="w3-container w3-center">
                  <h4 id="card_image_recipe_name"><b>Recipe</b></h4>
                  <p id="card_image_recipe_description">Description</p>
                  <!-- Recipe Tags -->
                  <span>
                    <img src="/chef-hat.png" alt="" style="width: 16px; opacity: 80%;">&nbsp;Easy&nbsp;&nbsp;</img>
                    <img src="/clock2.png" alt="" style="width: 16px; opacity: 80%;">&nbsp;20-40 min</img>
                  </span>

                </div>
              </div>
              <!-- Display Image Size -->
              <div class="w3-margin w3-center">
                <span id="card_image_size"
                  style="border: 1px solid lightgray; color: lightgray; font-weight: bold; padding: 5px;">
                  Image Size
                </span>
                <span id="card_image_size_checkmark" style="font-size: 16px; display: none;"></span>
              </div>
            </div>

            <!-- Create Button -->
            <button class="w3-button w3-block w3-green w3-section w3-padding" type="submit">Create Recipe</button>
          </div>
      </form>
    </div>
    <!-- Footer -->
    <%- include('partials/footer.ejs') %>

      <!-- JavaScript -->
      <!-- Move javascript to seperate file later -->
      <script>
        // TODO:
        // MAKE THESE CLASSES MORE GENERIC AND COMBINE

        // Add an ingredient on button click
        // ---------------------------------
        let ingredient_id = 1;
        let ingredient_row = document.getElementById('ingredient');
        let remove_ingredient_btn = document.getElementById('remove_ingredient');

        function addIngredient() {
          // Clone entire ingredient row
          let clone = ingredient_row.cloneNode(true);
          // Set the cloned ingredient row ID and name to ingredient(i)
          ingredient_id++;
          clone.id = "ingredient" + ingredient_id;
          clone.name = "ingredient" + ingredient_id;
          // Add ingredient row
          ingredient_row.parentNode.appendChild(clone);

          // Clear the values of the cloned row
          let ingredient_field = clone.childNodes[1].childNodes[3].childNodes[1];
          let amount_field = clone.childNodes[1].childNodes[7].childNodes[1];
          let unit_field = clone.childNodes[1].childNodes[11].childNodes[1];
          let note_field = clone.childNodes[1].childNodes[15].childNodes[1];

          ingredient_field.value = "";
          amount_field.value = "";
          unit_field.value = "";
          note_field.value = "";

          // Display remove button
          if (ingredient_id > 1) {
            remove_ingredient_btn.style.display = "block";
          }
        }

        function removeIngredient() {
          // Get the last ingredient row by id
          let ingredient = document.getElementById('ingredient' + ingredient_id);

          console.log(ingredient_id);
          // Remove the last ingredient
          ingredient.remove();

          // Decrement ingredients
          ingredient_id--;

          // Hide remove button
          if (ingredient_id <= 1) {
            remove_ingredient_btn.style.display = "none";
          }
        }

        // Add a step on button click
        // ---------------------------------
        let step_id = 1;
        let step_row = document.getElementById('step');
        let remove_step_btn = document.getElementById('remove_step');

        function addStep() {
          // Clone entire step row
          let clone = step_row.cloneNode(true);
          // Set the cloned step row ID and name to step(i)
          step_id++;
          clone.id = "step" + step_id;
          clone.name = "step" + step_id;
          // Add step row
          step_row.parentNode.appendChild(clone);

          // Clear the values of the cloned row
          let instruction_field = clone.childNodes[1].childNodes[1].childNodes[1];
          let note_field = clone.childNodes[1].childNodes[3].childNodes[1];
          instruction_field.value = "";
          note_field.value = "";

          // Display remove button
          if (step_id > 1) {
            remove_step_btn.style.display = "block";
          }
        }

        function removeStep() {
          // Get the last step row by id
          let step = document.getElementById('step' + step_id);
          // Remove the last step
          step.remove();
          // Decrement steps
          step_id--;

          // Hide remove button
          if (step_id <= 1) {
            remove_step_btn.style.display = "none";
          }
        }

        // Validate recipe name on typing
        // ------------------------------
        // Existing recipes are sent with the page
        // Save recipe names as a string because EJS vars can't be put into JS before the page has loaded
        recipesString = "<%= recipes %>".toUpperCase();

        // Split the string into an array
        existing_recipes = recipesString.split(",");

        // Doesn't allow duplicate recipes name in any capitalization
        function isNameValid() {
          // Get text from input field
          let input = document.getElementById("recipe_name");
          let input_value = input.value.toUpperCase();

          // Get recipe feedback message id
          let feedback_message = document.getElementById("recipe_name_feedback");

          // Check if recipe name is valid
          if (existing_recipes.indexOf(input_value) > -1) {
            input.style.color = "red";
            feedback_message.style.display = "block";
          } else {
            input.style.color = "black";
            feedback_message.style.display = "none";
          }
        }

        // Takes input field and tag for displaying length to calculate and display
        // the length of the input field text.
        function calcTextLength(input_field_id, display_tag_id) {
          // Colors
          const error_color = "red";
          const color = "black";

          // Get recipe name and length tag
          let input_text = document.getElementById(input_field_id);
          let input_length_tag = document.getElementById(display_tag_id);

          // Set length tag according to length of recipe name
          input_length_tag.innerHTML = input_text.value.length;

          // Set colors
          if (input_text.value.length === input_text.maxLength) {
            input_length_tag.style.color = error_color;
            input_text.style.caretColor = error_color;
          } else {
            input_length_tag.style.color = color;
            input_text.style.caretColor = color;
          }
        }

        function cookTimeSelector() {
          let selection = document.getElementById('cook_time_selector');
          let time_input_fields = document.getElementById('cook_time_fields');

          if (selection.value === 'interval') {
            time_input_fields.innerHTML =
              '<span>' +
              '<label>Enter the time interval for cooking this recipe</label><br>' +
              '<input id="cook_time_interval_first" name="cook_time" type="number" min="0" max="1000"' +
              'maxlength="1000" placeholder="From" required>' +
              '&nbsp; - &nbsp;' +
              '<input id="cook_time_interval_second" name="cook_time" type="number" min="0" max="1000"' +
              'maxlength="1000" placeholder="To" required>' +
              '&nbsp; min' +
              '</span>';
          } else {
            time_input_fields.innerHTML =
              '<input id="cook_time" name="cook_time" class="w3-input w3-border" type="number"' +
              'placeholder="Enter the time for cooking this recipe" max="1000" maxlength="1000" min="1" required>';
          }

          let cook_time = document.getElementById('cook_time');
          if (selection.value === 'more_than') {
            cook_time.placeholder = 'The recipe takes more than (minutes) to cook';
          } else if (selection.value === 'less_than') {
            cook_time.placeholder = 'The recipe takes less than (minutes) to cook';
          } else if (selection.value === 'specific') {
            cook_time.placeholder = 'The recipe takes (minutes) to cook';
          }
        }

        function isIngredientDuplicate(ingredient, id) {
          let existingIngredients = [];
          let nrOfIngredients = ingredient_id; // From 'add ingredient on button click'
          let incomingIngredientNr = 0;

          // Assign the correct id nr for ingredients
          if (id === 'ingredient') {
            incomingIngredientNr = 1;
          } else {
            incomingIngredientNr = parseInt(id.replace('ingredient', '')); // Split off id name to get the id nr
          }

          // Assign existing ingredients to array
          for (let i = 1; i <= nrOfIngredients; i++) {
            // Don't put the incoming ingredient into existingIngredients
            if (i !== incomingIngredientNr) {
              // The first id is just called 'ingredient' and has no nr
              if (i === 1) {
                existingIngredients.push(document.getElementById("ingredient")
                  .childNodes[1].childNodes[3].childNodes[1].value.toLowerCase());
              } else {
                // Proceeding id's start at 'ingredient2' etc.
                existingIngredients.push(document.getElementById("ingredient" + i)
                  .childNodes[1].childNodes[3].childNodes[1].value.toLowerCase());
              }
            }
          }

          // Return the function if only one ingredient exists
          // if (nrOfIngredients <= 1) return;
          console.log()
          // Current ingredient input field
          let input_field = document.getElementById(id).childNodes[1].childNodes[3].childNodes[1];
          console.log(id);
          // Check for duplicate ingredient
          if (existingIngredients.length >= 1 && existingIngredients.indexOf(ingredient.toLowerCase()) > -1) {
            // Duplicate ingredient found
            input_field.style.color = 'red';
          } else {
            input_field.style.color = 'black';
          }
        }

        function setImageInfo(imageId, imageLinkId, imageDescId, ratio) {
          // Get HTML input fields
          let image = document.getElementById(imageId);
          let imageLink = document.getElementById(imageLinkId);
          let imageDescription = document.getElementById(imageDescId);

          // When there is no image selected
          if (image.value === "") {
            // Reset values to display the placeholders
            imageLink.value = "";
            imageDescription.value = "";

            // Image selected
          } else {
            // Get the name of the uploaded image by stripping off fake path
            const imageName = image.value.replace("C:\\fakepath\\", "");

            // Set image link from image name
            if (ratio === "16:9") {
              imageLink.value = `/${imageName}`;
            }
            else if (ratio === "4:3") {
              imageLink.value = `/${imageName}`;
            }

            // Trim of the file extension
            const imageNameNoExt = imageName.replace(/\.(png|jpg|jpeg)$/, '');

            // Set image description to image name
            imageDescription.value = imageNameNoExt;

          }
        }

        // Display uploaded images
        // -----------------------
        const recipeImageInput = document.getElementById("recipe_image");
        const recipeImagePreview = document.getElementById("recipe_image_preview");
        const recipeImagePreviewText = document.getElementById("recipe_image_preview_text");

        recipeImageInput.addEventListener("change", function () {
          const file = this.files[0];

          if (file) {
            const reader = new FileReader();

            // Hide text and show image
            recipeImagePreviewText.style.display = "none";
            recipeImagePreview.style.display = "block";

            reader.addEventListener("load", function () {
              recipeImagePreview.setAttribute("src", this.result);
            });

            reader.readAsDataURL(file);
          } else {
            // Reset image and text
            recipeImagePreviewText.style.display = null;
            recipeImagePreview.style.display = "none";
            recipeImagePreview.setAttribute("src", "");
            let checkmark = document.getElementById("recipe_image_size_checkmark");
            let imageSizeField = document.getElementById("recipe_image_size");
            imageSizeField.style.color = "lightgray";
            imageSizeField.innerHTML = "Image Size";
            checkmark.style.display = "none";
          }
        })

        const cardImageInput = document.getElementById("card_image");
        const cardImagePreview = document.getElementById("card_image_preview");
        const cardImagePreviewText = document.getElementById("card_image_preview_text");

        cardImageInput.addEventListener("change", function () {
          const file = this.files[0];

          if (file) {
            const reader = new FileReader();

            // Hide text and show image
            cardImagePreviewText.style.display = "none";
            cardImagePreview.style.display = "block";

            reader.addEventListener("load", function () {
              cardImagePreview.setAttribute("src", this.result);
            });

            reader.readAsDataURL(file);
          } else {
            // Reset image and text
            cardImagePreviewText.style.display = null;
            cardImagePreview.style.display = "none";
            cardImagePreview.setAttribute("src", "");
            let checkmark = document.getElementById("card_image_size_checkmark");
            let imageSizeField = document.getElementById("card_image_size");
            imageSizeField.style.color = "lightgray";
            imageSizeField.innerHTML = "Image Size";
            checkmark.style.display = "none";
          }
        })

        // Set image size fields for verification that image is correct size
        function setImageSize(previewImage, sizeFieldId, dimensions, checkmarkId) {
          // Get image size
          let imageWidth = previewImage.naturalWidth;
          let imageHeight = previewImage.naturalHeight;
          let checkmark = document.getElementById(checkmarkId);

          // Ratios
          const RATIO_16_9 = 16 / 9;
          const RATIO_4_3 = 4 / 3;
          const ALLOWED_DIFF = 0.02;

          // Get size field
          imageSizeField = document.getElementById(sizeFieldId);

          // Set size field values
          imageSizeField.innerHTML = imageWidth + "x" + imageHeight;

          // Calculate image dimensions
          let calculatedRatio = imageWidth / imageHeight;

          // Calculates if a ratio is allowed given an aspect ratio e.g. 16:9 or 4:3
          // The function allows for a small diff and returns a boolean
          function ratioIsAllowed(allowedRatio) {
            if (calculatedRatio <= (allowedRatio + ALLOWED_DIFF) && calculatedRatio >= (allowedRatio - ALLOWED_DIFF)) {
              return true;
            }

            return false;
          }

          // Check if the dimensions are correct
          if (dimensions === "16:9" && ratioIsAllowed(RATIO_16_9)) {
            imageSizeField.style.color = "black";
            checkmark.style.display = "inline";
            checkmark.innerHTML = "✔️";
          }
          else if (dimensions === "4:3" && ratioIsAllowed(RATIO_4_3)) {
            imageSizeField.style.color = "black";
            checkmark.style.display = "inline";
            checkmark.innerHTML = "✔️";
          }
          else {
            // Set image size field color to red for invalid aspect ratio
            imageSizeField.style.color = "red";
            checkmark.style.display = "inline";
            checkmark.innerHTML = "❌";
          }
        }

        // Updates the title under the "card image" for a preview
        function setCardImageRecipeName(nameObject) {
          let recipeName = nameObject.value;
          let cardImageRecipeName = document.getElementById("card_image_recipe_name");
          cardImageRecipeName.innerHTML = recipeName.bold();
        }

        // Updates the description under the "card image" for a preview
        function setCardImageRecipeDescription(descriptionObject) {
          let recipeDescription = descriptionObject.value;
          let cardImageRecipeDescription = document.getElementById("card_image_recipe_description");
          cardImageRecipeDescription.innerHTML = recipeDescription;
        }
      </script>
</body>

</html>